// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sdctsystem

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SdctsystemABI is the input ABI used to generate the binding from.
const SdctsystemABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sdctSetup_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sdctVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenConverter_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurnPart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tox\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogDepositAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"fromto\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256[6]\",\"name\":\"ct\",\"type\":\"uint256[6]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sdctSetup\",\"outputs\":[{\"internalType\":\"contractSDCTSetup\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sdctVerifier\",\"outputs\":[{\"internalType\":\"contractSDCTVerifier\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenConverter\",\"outputs\":[{\"internalType\":\"contractTokenConverter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLength_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"openPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"closePending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"depositAccountETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[40]\",\"name\":\"points\",\"type\":\"uint256[40]\"},{\"internalType\":\"uint256[10]\",\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[12]\",\"name\":\"l\",\"type\":\"uint256[12]\"},{\"internalType\":\"uint256[12]\",\"name\":\"r\",\"type\":\"uint256[12]\"}],\"name\":\"transferETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[40]\",\"name\":\"points\",\"type\":\"uint256[40]\"},{\"internalType\":\"uint256[10]\",\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256[12]\",\"name\":\"l\",\"type\":\"uint256[12]\"},{\"internalType\":\"uint256[12]\",\"name\":\"r\",\"type\":\"uint256[12]\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"ct\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"getPendingFunNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"burnETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// SdctsystemBin is the compiled bytecode used for deploying new contracts.
var SdctsystemBin = ""

// DeploySdctsystem deploys a new Ethereum contract, binding an instance of Sdctsystem to it.
func DeploySdctsystem(auth *bind.TransactOpts, backend bind.ContractBackend, sdctSetup_ common.Address, sdctVerifier_ common.Address, tokenConverter_ common.Address) (common.Address, *types.Transaction, *Sdctsystem, error) {
	parsed, err := abi.JSON(strings.NewReader(SdctsystemABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SdctsystemBin), backend, sdctSetup_, sdctVerifier_, tokenConverter_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sdctsystem{SdctsystemCaller: SdctsystemCaller{contract: contract}, SdctsystemTransactor: SdctsystemTransactor{contract: contract}, SdctsystemFilterer: SdctsystemFilterer{contract: contract}}, nil
}

// Sdctsystem is an auto generated Go binding around an Ethereum contract.
type Sdctsystem struct {
	SdctsystemCaller     // Read-only binding to the contract
	SdctsystemTransactor // Write-only binding to the contract
	SdctsystemFilterer   // Log filterer for contract events
}

// SdctsystemCaller is an auto generated read-only Go binding around an Ethereum contract.
type SdctsystemCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdctsystemTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SdctsystemTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdctsystemFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SdctsystemFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SdctsystemSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SdctsystemSession struct {
	Contract     *Sdctsystem       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SdctsystemCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SdctsystemCallerSession struct {
	Contract *SdctsystemCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SdctsystemTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SdctsystemTransactorSession struct {
	Contract     *SdctsystemTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SdctsystemRaw is an auto generated low-level Go binding around an Ethereum contract.
type SdctsystemRaw struct {
	Contract *Sdctsystem // Generic contract binding to access the raw methods on
}

// SdctsystemCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SdctsystemCallerRaw struct {
	Contract *SdctsystemCaller // Generic read-only contract binding to access the raw methods on
}

// SdctsystemTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SdctsystemTransactorRaw struct {
	Contract *SdctsystemTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSdctsystem creates a new instance of Sdctsystem, bound to a specific deployed contract.
func NewSdctsystem(address common.Address, backend bind.ContractBackend) (*Sdctsystem, error) {
	contract, err := bindSdctsystem(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sdctsystem{SdctsystemCaller: SdctsystemCaller{contract: contract}, SdctsystemTransactor: SdctsystemTransactor{contract: contract}, SdctsystemFilterer: SdctsystemFilterer{contract: contract}}, nil
}

// NewSdctsystemCaller creates a new read-only instance of Sdctsystem, bound to a specific deployed contract.
func NewSdctsystemCaller(address common.Address, caller bind.ContractCaller) (*SdctsystemCaller, error) {
	contract, err := bindSdctsystem(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SdctsystemCaller{contract: contract}, nil
}

// NewSdctsystemTransactor creates a new write-only instance of Sdctsystem, bound to a specific deployed contract.
func NewSdctsystemTransactor(address common.Address, transactor bind.ContractTransactor) (*SdctsystemTransactor, error) {
	contract, err := bindSdctsystem(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SdctsystemTransactor{contract: contract}, nil
}

// NewSdctsystemFilterer creates a new log filterer instance of Sdctsystem, bound to a specific deployed contract.
func NewSdctsystemFilterer(address common.Address, filterer bind.ContractFilterer) (*SdctsystemFilterer, error) {
	contract, err := bindSdctsystem(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SdctsystemFilterer{contract: contract}, nil
}

// bindSdctsystem binds a generic wrapper to an already deployed contract.
func bindSdctsystem(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SdctsystemABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sdctsystem *SdctsystemRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Sdctsystem.Contract.SdctsystemCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sdctsystem *SdctsystemRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sdctsystem.Contract.SdctsystemTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sdctsystem *SdctsystemRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sdctsystem.Contract.SdctsystemTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sdctsystem *SdctsystemCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Sdctsystem.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sdctsystem *SdctsystemTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sdctsystem.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sdctsystem *SdctsystemTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sdctsystem.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Sdctsystem *SdctsystemCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Sdctsystem.contract.Call(opts, out, "bitSize")
	return *ret0, err
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Sdctsystem *SdctsystemSession) BitSize() (*big.Int, error) {
	return _Sdctsystem.Contract.BitSize(&_Sdctsystem.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Sdctsystem *SdctsystemCallerSession) BitSize() (*big.Int, error) {
	return _Sdctsystem.Contract.BitSize(&_Sdctsystem.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Sdctsystem *SdctsystemCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Sdctsystem.contract.Call(opts, out, "g")
	return *ret, err
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Sdctsystem *SdctsystemSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Sdctsystem.Contract.G(&_Sdctsystem.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Sdctsystem *SdctsystemCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Sdctsystem.Contract.G(&_Sdctsystem.CallOpts)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) view returns(uint256)
func (_Sdctsystem *SdctsystemCaller) GetPendingFunNonce(opts *bind.CallOpts, x *big.Int, y *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Sdctsystem.contract.Call(opts, out, "getPendingFunNonce", x, y)
	return *ret0, err
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) view returns(uint256)
func (_Sdctsystem *SdctsystemSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Sdctsystem.Contract.GetPendingFunNonce(&_Sdctsystem.CallOpts, x, y)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) view returns(uint256)
func (_Sdctsystem *SdctsystemCallerSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Sdctsystem.Contract.GetPendingFunNonce(&_Sdctsystem.CallOpts, x, y)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) view returns(uint256[4] ct, uint256 nonce)
func (_Sdctsystem *SdctsystemCaller) GetUserBalance(opts *bind.CallOpts, x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	ret := new(struct {
		Ct    [4]*big.Int
		Nonce *big.Int
	})
	out := ret
	err := _Sdctsystem.contract.Call(opts, out, "getUserBalance", x, y, token)
	return *ret, err
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) view returns(uint256[4] ct, uint256 nonce)
func (_Sdctsystem *SdctsystemSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Sdctsystem.Contract.GetUserBalance(&_Sdctsystem.CallOpts, x, y, token)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) view returns(uint256[4] ct, uint256 nonce)
func (_Sdctsystem *SdctsystemCallerSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Sdctsystem.Contract.GetUserBalance(&_Sdctsystem.CallOpts, x, y, token)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Sdctsystem *SdctsystemCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Sdctsystem.contract.Call(opts, out, "h")
	return *ret, err
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Sdctsystem *SdctsystemSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Sdctsystem.Contract.H(&_Sdctsystem.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Sdctsystem *SdctsystemCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Sdctsystem.Contract.H(&_Sdctsystem.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() view returns(uint256)
func (_Sdctsystem *SdctsystemCaller) MaxNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Sdctsystem.contract.Call(opts, out, "maxNumber")
	return *ret0, err
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() view returns(uint256)
func (_Sdctsystem *SdctsystemSession) MaxNumber() (*big.Int, error) {
	return _Sdctsystem.Contract.MaxNumber(&_Sdctsystem.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() view returns(uint256)
func (_Sdctsystem *SdctsystemCallerSession) MaxNumber() (*big.Int, error) {
	return _Sdctsystem.Contract.MaxNumber(&_Sdctsystem.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Sdctsystem *SdctsystemCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Sdctsystem.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Sdctsystem *SdctsystemSession) N() (*big.Int, error) {
	return _Sdctsystem.Contract.N(&_Sdctsystem.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Sdctsystem *SdctsystemCallerSession) N() (*big.Int, error) {
	return _Sdctsystem.Contract.N(&_Sdctsystem.CallOpts)
}

// SdctSetup is a free data retrieval call binding the contract method 0x718aece7.
//
// Solidity: function sdctSetup() view returns(address)
func (_Sdctsystem *SdctsystemCaller) SdctSetup(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Sdctsystem.contract.Call(opts, out, "sdctSetup")
	return *ret0, err
}

// SdctSetup is a free data retrieval call binding the contract method 0x718aece7.
//
// Solidity: function sdctSetup() view returns(address)
func (_Sdctsystem *SdctsystemSession) SdctSetup() (common.Address, error) {
	return _Sdctsystem.Contract.SdctSetup(&_Sdctsystem.CallOpts)
}

// SdctSetup is a free data retrieval call binding the contract method 0x718aece7.
//
// Solidity: function sdctSetup() view returns(address)
func (_Sdctsystem *SdctsystemCallerSession) SdctSetup() (common.Address, error) {
	return _Sdctsystem.Contract.SdctSetup(&_Sdctsystem.CallOpts)
}

// SdctVerifier is a free data retrieval call binding the contract method 0xe0259bfd.
//
// Solidity: function sdctVerifier() view returns(address)
func (_Sdctsystem *SdctsystemCaller) SdctVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Sdctsystem.contract.Call(opts, out, "sdctVerifier")
	return *ret0, err
}

// SdctVerifier is a free data retrieval call binding the contract method 0xe0259bfd.
//
// Solidity: function sdctVerifier() view returns(address)
func (_Sdctsystem *SdctsystemSession) SdctVerifier() (common.Address, error) {
	return _Sdctsystem.Contract.SdctVerifier(&_Sdctsystem.CallOpts)
}

// SdctVerifier is a free data retrieval call binding the contract method 0xe0259bfd.
//
// Solidity: function sdctVerifier() view returns(address)
func (_Sdctsystem *SdctsystemCallerSession) SdctVerifier() (common.Address, error) {
	return _Sdctsystem.Contract.SdctVerifier(&_Sdctsystem.CallOpts)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() view returns(address)
func (_Sdctsystem *SdctsystemCaller) TokenConverter(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Sdctsystem.contract.Call(opts, out, "tokenConverter")
	return *ret0, err
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() view returns(address)
func (_Sdctsystem *SdctsystemSession) TokenConverter() (common.Address, error) {
	return _Sdctsystem.Contract.TokenConverter(&_Sdctsystem.CallOpts)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() view returns(address)
func (_Sdctsystem *SdctsystemCallerSession) TokenConverter() (common.Address, error) {
	return _Sdctsystem.Contract.TokenConverter(&_Sdctsystem.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0xe7cceb65.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Sdctsystem *SdctsystemTransactor) Burn(opts *bind.TransactOpts, receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "burn", receiver, token, amount, publicKey, proof, z)
}

// Burn is a paid mutator transaction binding the contract method 0xe7cceb65.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Sdctsystem *SdctsystemSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.Burn(&_Sdctsystem.TransactOpts, receiver, token, amount, publicKey, proof, z)
}

// Burn is a paid mutator transaction binding the contract method 0xe7cceb65.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Sdctsystem *SdctsystemTransactorSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.Burn(&_Sdctsystem.TransactOpts, receiver, token, amount, publicKey, proof, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0xd933900a.
//
// Solidity: function burnETH(address receiver, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Sdctsystem *SdctsystemTransactor) BurnETH(opts *bind.TransactOpts, receiver common.Address, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "burnETH", receiver, amount, publicKey, proof, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0xd933900a.
//
// Solidity: function burnETH(address receiver, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Sdctsystem *SdctsystemSession) BurnETH(receiver common.Address, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.BurnETH(&_Sdctsystem.TransactOpts, receiver, amount, publicKey, proof, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0xd933900a.
//
// Solidity: function burnETH(address receiver, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Sdctsystem *SdctsystemTransactorSession) BurnETH(receiver common.Address, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.BurnETH(&_Sdctsystem.TransactOpts, receiver, amount, publicKey, proof, z)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Sdctsystem *SdctsystemTransactor) ClosePending(opts *bind.TransactOpts, x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "closePending", x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Sdctsystem *SdctsystemSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.ClosePending(&_Sdctsystem.TransactOpts, x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Sdctsystem *SdctsystemTransactorSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.ClosePending(&_Sdctsystem.TransactOpts, x, y, nonce, sig)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) payable returns(bool)
func (_Sdctsystem *SdctsystemTransactor) DepositAccount(opts *bind.TransactOpts, publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "depositAccount", publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) payable returns(bool)
func (_Sdctsystem *SdctsystemSession) DepositAccount(publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.DepositAccount(&_Sdctsystem.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) payable returns(bool)
func (_Sdctsystem *SdctsystemTransactorSession) DepositAccount(publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.DepositAccount(&_Sdctsystem.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0xdedef233.
//
// Solidity: function depositAccountETH(uint256[2] publicKey) payable returns(bool)
func (_Sdctsystem *SdctsystemTransactor) DepositAccountETH(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "depositAccountETH", publicKey)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0xdedef233.
//
// Solidity: function depositAccountETH(uint256[2] publicKey) payable returns(bool)
func (_Sdctsystem *SdctsystemSession) DepositAccountETH(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.DepositAccountETH(&_Sdctsystem.TransactOpts, publicKey)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0xdedef233.
//
// Solidity: function depositAccountETH(uint256[2] publicKey) payable returns(bool)
func (_Sdctsystem *SdctsystemTransactorSession) DepositAccountETH(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.DepositAccountETH(&_Sdctsystem.TransactOpts, publicKey)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Sdctsystem *SdctsystemTransactor) OpenPending(opts *bind.TransactOpts, x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "openPending", x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Sdctsystem *SdctsystemSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.OpenPending(&_Sdctsystem.TransactOpts, x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Sdctsystem *SdctsystemTransactorSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.OpenPending(&_Sdctsystem.TransactOpts, x, y, epochLength_, nonce, sig)
}

// Transfer is a paid mutator transaction binding the contract method 0xbff93f10.
//
// Solidity: function transfer(uint256[40] points, uint256[10] scalar, uint256 token, uint256[12] l, uint256[12] r) returns(bool)
func (_Sdctsystem *SdctsystemTransactor) Transfer(opts *bind.TransactOpts, points [40]*big.Int, scalar [10]*big.Int, token *big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "transfer", points, scalar, token, l, r)
}

// Transfer is a paid mutator transaction binding the contract method 0xbff93f10.
//
// Solidity: function transfer(uint256[40] points, uint256[10] scalar, uint256 token, uint256[12] l, uint256[12] r) returns(bool)
func (_Sdctsystem *SdctsystemSession) Transfer(points [40]*big.Int, scalar [10]*big.Int, token *big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.Transfer(&_Sdctsystem.TransactOpts, points, scalar, token, l, r)
}

// Transfer is a paid mutator transaction binding the contract method 0xbff93f10.
//
// Solidity: function transfer(uint256[40] points, uint256[10] scalar, uint256 token, uint256[12] l, uint256[12] r) returns(bool)
func (_Sdctsystem *SdctsystemTransactorSession) Transfer(points [40]*big.Int, scalar [10]*big.Int, token *big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.Transfer(&_Sdctsystem.TransactOpts, points, scalar, token, l, r)
}

// TransferETH is a paid mutator transaction binding the contract method 0x1a85a3ac.
//
// Solidity: function transferETH(uint256[40] points, uint256[10] scalar, uint256[12] l, uint256[12] r) returns(bool)
func (_Sdctsystem *SdctsystemTransactor) TransferETH(opts *bind.TransactOpts, points [40]*big.Int, scalar [10]*big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.contract.Transact(opts, "transferETH", points, scalar, l, r)
}

// TransferETH is a paid mutator transaction binding the contract method 0x1a85a3ac.
//
// Solidity: function transferETH(uint256[40] points, uint256[10] scalar, uint256[12] l, uint256[12] r) returns(bool)
func (_Sdctsystem *SdctsystemSession) TransferETH(points [40]*big.Int, scalar [10]*big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.TransferETH(&_Sdctsystem.TransactOpts, points, scalar, l, r)
}

// TransferETH is a paid mutator transaction binding the contract method 0x1a85a3ac.
//
// Solidity: function transferETH(uint256[40] points, uint256[10] scalar, uint256[12] l, uint256[12] r) returns(bool)
func (_Sdctsystem *SdctsystemTransactorSession) TransferETH(points [40]*big.Int, scalar [10]*big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Sdctsystem.Contract.TransferETH(&_Sdctsystem.TransactOpts, points, scalar, l, r)
}

// SdctsystemLogBurnIterator is returned from FilterLogBurn and is used to iterate over the raw logs and unpacked data for LogBurn events raised by the Sdctsystem contract.
type SdctsystemLogBurnIterator struct {
	Event *SdctsystemLogBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SdctsystemLogBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SdctsystemLogBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SdctsystemLogBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SdctsystemLogBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SdctsystemLogBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SdctsystemLogBurn represents a LogBurn event raised by the Sdctsystem contract.
type SdctsystemLogBurn struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurn is a free log retrieval operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) FilterLogBurn(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*SdctsystemLogBurnIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.FilterLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SdctsystemLogBurnIterator{contract: _Sdctsystem.contract, event: "LogBurn", logs: logs, sub: sub}, nil
}

// WatchLogBurn is a free log subscription operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) WatchLogBurn(opts *bind.WatchOpts, sink chan<- *SdctsystemLogBurn, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.WatchLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SdctsystemLogBurn)
				if err := _Sdctsystem.contract.UnpackLog(event, "LogBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurn is a log parse operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) ParseLogBurn(log types.Log) (*SdctsystemLogBurn, error) {
	event := new(SdctsystemLogBurn)
	if err := _Sdctsystem.contract.UnpackLog(event, "LogBurn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SdctsystemLogBurnPartIterator is returned from FilterLogBurnPart and is used to iterate over the raw logs and unpacked data for LogBurnPart events raised by the Sdctsystem contract.
type SdctsystemLogBurnPartIterator struct {
	Event *SdctsystemLogBurnPart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SdctsystemLogBurnPartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SdctsystemLogBurnPart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SdctsystemLogBurnPart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SdctsystemLogBurnPartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SdctsystemLogBurnPartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SdctsystemLogBurnPart represents a LogBurnPart event raised by the Sdctsystem contract.
type SdctsystemLogBurnPart struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurnPart is a free log retrieval operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) FilterLogBurnPart(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*SdctsystemLogBurnPartIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.FilterLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SdctsystemLogBurnPartIterator{contract: _Sdctsystem.contract, event: "LogBurnPart", logs: logs, sub: sub}, nil
}

// WatchLogBurnPart is a free log subscription operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) WatchLogBurnPart(opts *bind.WatchOpts, sink chan<- *SdctsystemLogBurnPart, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.WatchLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SdctsystemLogBurnPart)
				if err := _Sdctsystem.contract.UnpackLog(event, "LogBurnPart", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurnPart is a log parse operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) ParseLogBurnPart(log types.Log) (*SdctsystemLogBurnPart, error) {
	event := new(SdctsystemLogBurnPart)
	if err := _Sdctsystem.contract.UnpackLog(event, "LogBurnPart", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SdctsystemLogDepositAccountIterator is returned from FilterLogDepositAccount and is used to iterate over the raw logs and unpacked data for LogDepositAccount events raised by the Sdctsystem contract.
type SdctsystemLogDepositAccountIterator struct {
	Event *SdctsystemLogDepositAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SdctsystemLogDepositAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SdctsystemLogDepositAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SdctsystemLogDepositAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SdctsystemLogDepositAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SdctsystemLogDepositAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SdctsystemLogDepositAccount represents a LogDepositAccount event raised by the Sdctsystem contract.
type SdctsystemLogDepositAccount struct {
	Proxy  common.Address
	Token  common.Address
	Tox    *big.Int
	Toy    *big.Int
	Amount *big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDepositAccount is a free log retrieval operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) FilterLogDepositAccount(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*SdctsystemLogDepositAccountIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.FilterLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SdctsystemLogDepositAccountIterator{contract: _Sdctsystem.contract, event: "LogDepositAccount", logs: logs, sub: sub}, nil
}

// WatchLogDepositAccount is a free log subscription operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) WatchLogDepositAccount(opts *bind.WatchOpts, sink chan<- *SdctsystemLogDepositAccount, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.WatchLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SdctsystemLogDepositAccount)
				if err := _Sdctsystem.contract.UnpackLog(event, "LogDepositAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogDepositAccount is a log parse operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) ParseLogDepositAccount(log types.Log) (*SdctsystemLogDepositAccount, error) {
	event := new(SdctsystemLogDepositAccount)
	if err := _Sdctsystem.contract.UnpackLog(event, "LogDepositAccount", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SdctsystemLogTransferIterator is returned from FilterLogTransfer and is used to iterate over the raw logs and unpacked data for LogTransfer events raised by the Sdctsystem contract.
type SdctsystemLogTransferIterator struct {
	Event *SdctsystemLogTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SdctsystemLogTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SdctsystemLogTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SdctsystemLogTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SdctsystemLogTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SdctsystemLogTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SdctsystemLogTransfer represents a LogTransfer event raised by the Sdctsystem contract.
type SdctsystemLogTransfer struct {
	Proxy  common.Address
	Token  common.Address
	Fromto [4]*big.Int
	Ct     [6]*big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogTransfer is a free log retrieval operation binding the contract event 0xc71e0f99f5ed208267be74f17ebca8a5a42818d0179f380d7e06f7dce143aa3a.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[6] ct, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) FilterLogTransfer(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*SdctsystemLogTransferIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.FilterLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SdctsystemLogTransferIterator{contract: _Sdctsystem.contract, event: "LogTransfer", logs: logs, sub: sub}, nil
}

// WatchLogTransfer is a free log subscription operation binding the contract event 0xc71e0f99f5ed208267be74f17ebca8a5a42818d0179f380d7e06f7dce143aa3a.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[6] ct, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) WatchLogTransfer(opts *bind.WatchOpts, sink chan<- *SdctsystemLogTransfer, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sdctsystem.contract.WatchLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SdctsystemLogTransfer)
				if err := _Sdctsystem.contract.UnpackLog(event, "LogTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogTransfer is a log parse operation binding the contract event 0xc71e0f99f5ed208267be74f17ebca8a5a42818d0179f380d7e06f7dce143aa3a.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[6] ct, uint256 time)
func (_Sdctsystem *SdctsystemFilterer) ParseLogTransfer(log types.Log) (*SdctsystemLogTransfer, error) {
	event := new(SdctsystemLogTransfer)
	if err := _Sdctsystem.contract.UnpackLog(event, "LogTransfer", log); err != nil {
		return nil, err
	}
	return event, nil
}
